From 37291a763bfd47ae2af5985b045d7e426659b6cb Mon Sep 17 00:00:00 2001
From: mtk20656 <chank.chen@mediatek.com>
Date: Thu, 31 Oct 2024 14:18:13 +0800
Subject: [PATCH] fix mlo hidden bss connect issue

Signed-off-by: mtk20656 <chank.chen@mediatek.com>
---
 wpa_supplicant/bss.c | 22 ++++++++++++++++++++++
 wpa_supplicant/bss.h |  2 ++
 wpa_supplicant/sme.c | 11 +++++++++++
 3 files changed, 35 insertions(+)

diff --git a/wpa_supplicant/bss.c b/wpa_supplicant/bss.c
index b55ebd0..44fd0a3 100644
--- a/wpa_supplicant/bss.c
+++ b/wpa_supplicant/bss.c
@@ -1081,6 +1081,28 @@ struct wpa_bss * wpa_bss_get_bssid_latest(struct wpa_supplicant *wpa_s,
 	return found;
 }
 
+/**
+* wpa_bss_get_bssid_with_probe - Fetch a BSS table entry based on BSSID
+* @wpa_s: Pointer to wpa_supplicant data
+* @bssid: BSSID
+* Returns: Pointer to the BSS entry or %NULL if not found
+*
+* This function is like wpa_bss_get_bssid(), but full BSS table is iterated to
+* find the entry that has the probe response ie conntent.
+*/
+
+struct wpa_bss * wpa_bss_get_bssid_with_probe(struct wpa_supplicant *wpa_s,
+				 const u8 *bssid)
+{
+  struct wpa_bss *bss;
+  if (!wpa_supplicant_filter_bssid_match(wpa_s, bssid))
+	  return NULL;
+  dl_list_for_each_reverse(bss, &wpa_s->bss, struct wpa_bss, list) {
+	  if ((os_memcmp(bss->bssid, bssid, ETH_ALEN) == 0) && bss->ie_len)
+		  return bss;
+  }
+  return NULL;
+}
 
 #ifdef CONFIG_P2P
 /**
diff --git a/wpa_supplicant/bss.h b/wpa_supplicant/bss.h
index d86ef26..6cab3eb 100644
--- a/wpa_supplicant/bss.h
+++ b/wpa_supplicant/bss.h
@@ -164,6 +164,8 @@ struct wpa_bss * wpa_bss_get_bssid(struct wpa_supplicant *wpa_s,
 				   const u8 *bssid);
 struct wpa_bss * wpa_bss_get_bssid_latest(struct wpa_supplicant *wpa_s,
 					  const u8 *bssid);
+struct wpa_bss * wpa_bss_get_bssid_with_probe(struct wpa_supplicant *wpa_s,
+				 const u8 *bssid);
 struct wpa_bss * wpa_bss_get_p2p_dev_addr(struct wpa_supplicant *wpa_s,
 					  const u8 *dev_addr);
 struct wpa_bss * wpa_bss_get_id(struct wpa_supplicant *wpa_s, unsigned int id);
diff --git a/wpa_supplicant/sme.c b/wpa_supplicant/sme.c
index 297924e..ecaaeef 100644
--- a/wpa_supplicant/sme.c
+++ b/wpa_supplicant/sme.c
@@ -156,6 +156,17 @@ static struct wpabuf * sme_auth_build_sae_commit(struct wpa_supplicant *wpa_s,
 		const u8 *rsnxe;
 
 		rsnxe = wpa_bss_get_rsnxe(bss);
+
+		if (!rsnxe) {
+			bss = wpa_bss_get_bssid_with_probe(wpa_s, bssid);
+
+			if (bss) {
+				wpa_printf(MSG_DEBUG,
+		   		"SAE: get empty rsnxe, try to use another non-hidden bss entry(ssid=%s)!", bss->ssid);
+				rsnxe = wpa_bss_get_rsnxe(bss);
+			}
+		}
+
 		if (rsnxe && rsnxe[0] == WLAN_EID_VENDOR_SPECIFIC &&
 		    rsnxe[1] >= 1 + 4)
 			rsnxe_capa = rsnxe[2 + 4];
-- 
2.45.2

