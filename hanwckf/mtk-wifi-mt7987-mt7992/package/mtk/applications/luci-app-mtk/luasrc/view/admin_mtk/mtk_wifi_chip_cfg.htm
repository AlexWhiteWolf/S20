<%+header%>
<!--
    This module is a demo to configure MTK' proprietary WiFi driver.
    Basic idea is to bypass uci and edit wireless profile (mt76xx.dat) directly.
    LuCI's WiFi configuration is more logical and elegent, but it's quite tricky to
    translate uci into MTK's WiFi profile (like we did in "uci2dat").

    Hua Shao <nossiac@163.com>
-->

<%
local disp = require "luci.dispatcher"
-- local request  = disp.context.path
local request = disp.context.request
local mtkwifi = require("mtkwifi")
local devname = request[5]
local devs = mtkwifi.get_all_devs()
local dev = {}
for _,v in ipairs(devs) do
    if v.devname == devname then
        dev = v
    end
end
local cfgs = mtkwifi.load_cfg(dev.devname)
local map_cfgs
local first_card_cfgs
local appliedMapModeDiff
if pcall(require, "map_helper") then
    map_cfgs = mtkwifi.load_profile(mtkwifi.__read_easymesh_profile_path())
    first_card_cfgs = mtkwifi.load_cfg(mtkwifi.detect_first_card())
    local appliedMapDiffTable = mtkwifi.diff_cfg(mtkwifi.detect_first_card())
    appliedMapModeDiff = appliedMapDiffTable["MapMode"] and appliedMapDiffTable["MapMode"][2] or nil
end
%>

<style type="text/css">
    table.sp_table {
        font-family: verdana,arial,sans-serif;
        font-size:12px;
        color:#333333;
        border-width: 1px;
        border-color: #999999;
        border-collapse: collapse;
        text-align: center;
    }
    table.sp_table th {
        background-color:#c3dde0;
        border-width: 1px;
        padding: 1px;
        border-style: solid;
        border-color: #a9c6c9;
        text-align: center;
    }
    table.sp_table tr {
        background-color:#d4e3e5;
    }
    table.sp_table td {
        border-width: 1px;
        padding: 2px;
        border-style: solid;
        border-color: #a9c6c9;
        text-align: center;
    }
    .sp-form-item {
      position: relative;
      padding-left: 155px;
      padding-right: 20px;
      margin-top: 1px
      margin-bottom: 1px;
      line-height: 40px;
      height: 40px;
    }
    .sp-form-item > .lb {
      position: absolute;
      left: 0;
      top: 0;
      display: block;
      width: 150px;
      text-align: right;
      line-height: 40px;
      height: 40px;
      font-size: 13px;
    }
    .sp-form-item > .txt {
      width: 300px;
      line-height: 40px;
      height: 40px;
    }
    .mask {
      position: absolute;
      top: 0px;
      left: 0px;
      width: 100%;
      height: 100%;
      background: #000;
      opacity: 0.15;
      display: none;
    }
    .sp-form {
      position: absolute;
      top: 10%;
      left: 50%;
      margin-left: -197px;
      padding-bottom: 5px;
      background: #f1f1f1;
      display: none;
    }
    .sp-form-title {
      background-color: #d8d8d8;
      border-width: 1px 1px 0 1px;
      border-bottom: 0;
      margin-bottom: 0;
      position: relative;
    }
    .sp-form-title span {
      width: auto;
      font-size: 16px;
      font-weight: bold;
      color: rgb(102, 102, 102);
      text-indent: 12px;
      padding: 8px 0px 10px;
      margin-right: 10px;
      display: block;
      overflow: hidden;
      text-align: left;
    }
    .sp-form-title div {
      width: 16px;
      height: 20px;
      position: absolute;
      right: 10px;
      top: 6px;
      font-size: 30px;
      line-height: 16px;
      cursor: pointer;
    }
    .sp-form-submit {
      text-align: center;
    }
    .sp-form-submit input {
      width: 170px;
      height: 32px;
    }
    .cbi-section-table tr td{
      padding: 2px 0;
    }
    .divide_line{
      border-bottom: 1px dotted #bfbfbf;
      padding-bottom: 10px;
    }
</style>

<script src="/luci-static/resources/monCon.js"></script>
<script type="text/javascript" src="<%=resource%>/cbi.js?v=git-17.250.41546-90ac861"></script>
<script type="text/javascript">
function hi(to) {
    var a;
    var x;
    var tabs = new Array();
    tabs.push("basic");
    <% if cfgs["VOW_Airtime_Fairness_En"] then %>
        tabs.push("vow");
    <% end %>
    <% if cfgs["MapMode"] ~= "1" then %>
        tabs.push("qos");
    <% end %>
    for (x in tabs)
    {
        if (tabs[x] != to) {
            a = document.getElementById('dev-cfg' + '-tab-' + tabs[x]);
            a.className = "cbi-tab-disabled";
            a = document.getElementById('dev-cfg' + '-' + tabs[x]);
            a.style.display = "none";
        }
    }
    a = document.getElementById('dev-cfg' + '-tab-' + to);
    a.className = "cbi-tab";
    a = document.getElementById('dev-cfg' + '-' + to);
    a.style.display = "";
    if (to == "qos") {
        get_qos_rule_list()
    }
}
</script>

<form method="post" name="cbi" action="<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "chip_cfg", devname)%>" enctype="multipart/form-data" onreset="return cbi_validate_reset(this)" onsubmit="return cbi_validate_form(this, 'Some fields are invalid, cannot save values!') && ValidateAllSettings()" autocomplete="false">
    <fieldset class="cbi-section">
        <legend> Chip Configurations - <%=string.split(devname,".")[1]%>
            <%local diff = mtkwifi.diff_cfg(dev.devname)%>
            <%if next(diff) ~= nil then%>
                <span style="color:red;">( <a href="javascript:location.href='<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "reload", dev.devname)%>'">Click here</a> to apply changes)</span>
            <%end%>
        </legend>
        <div class="alert-message" id="EASYMESH_WARNING_MSG" style="display:none;">
            <strong>WARNING: EasyMesh feature is enabled!</strong>
        </div>
        <ul class="cbi-tabmenu">
            <li class="cbi-tab" id="dev-cfg-tab-basic">
                <a href="javascript:hi('basic');this.blur(); ">Basic</a>
            </li>
            <% if cfgs["VOW_Airtime_Fairness_En"] then %>
                <li class="cbi-tab-disabled" id="dev-cfg-tab-vow">
                    <a href="javascript:this.blur(); hi('vow')">VoW</a>
                </li>
            <% end %>
            <% if cfgs["MapMode"] ~= "1" then %>
                <li class="cbi-tab-disabled" id="dev-cfg-tab-qos">
                    <a href="javascript:this.blur(); hi('qos')">QosMgmt</a>
                </li>
            <% end %>
        </ul>
        <table id="dev-cfg-basic" class="cbi-section-table">
            <tr>
                <td>Reverse Direction Grant (RDG)</td>
                <td>
                    <input type="radio" name="HT_RDG" value="1" <% if cfgs.HT_RDG == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="HT_RDG" value="0" <% if cfgs.HT_RDG == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>HT Disallow TKIP</td>
                <td>
                    <input type="radio" name="HT_DisallowTKIP" value="1" <% if cfgs.HT_DisallowTKIP == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="HT_DisallowTKIP" value="0" <% if cfgs.HT_DisallowTKIP == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <% if cfgs.WHNAT then %>
                <tr>
                    <td>Wi-Fi HW NAT</td>
                    <td>
                        <select style="width:auto" name="WHNAT">
                            <option value="1" <% if cfgs.WHNAT == "1" then %> selected="selected"<% end%>> Enable</option>
                            <option value="0" <% if cfgs.WHNAT ~= "1" then %> selected="selected"<% end%>> Disable</option>
                        </select>
                    </td>
                    <td>Supported by MT7615</td>
                </tr>
            <% end %>
            <% if cfgs.E2pAccessMode then %>
                <tr>
                    <td>E2pAccessMode</td>
                    <td>
                        <select style="width:auto" name="E2pAccessMode">
                            <option value="1" <% if cfgs.E2pAccessMode == "1" then %> selected="selected"<% end%>>EFUSE</option>
                            <option value="2" <% if cfgs.E2pAccessMode == "2" then %> selected="selected"<% end%>>FLASH</option>
                            <% if mtkwifi.__is_6890_project() then %>
                                <option value="4" <% if cfgs.E2pAccessMode == "4" then %> selected="selected"<% end%>>BIN</option>
                            <% end %>
                        </select>
                    </td>
                    <td></td>
                </tr>
            <% end %>
            <tr>
                <td>Beacon Interval</td>
                <td>
                    <input name="BeaconPeriod" id="BeaconPeriod" value="<%=cfgs.BeaconPeriod%>" />tu(range 20-999, default 100)
                </td>
                <td></td>
            </tr>
            <tr>
                <td>BG Protection Mode</td>
                <td>
                    <select name="BGProtection" style="width:auto">
                        <option value="0" <% if cfgs.BGProtection == "0" then %>selected="selected"<% end %>>Auto</option>
                        <option value="1" <% if cfgs.BGProtection == "1" then %>selected="selected"<% end %>>Always On</option>
                        <option value="2" <% if cfgs.BGProtection == "2" then %>selected="selected"<% end %>>Always Off</option>
                    </select>
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Short Preamble</td>
                <td>
                    <input type="radio" name="TxPreamble" value="1" <% if cfgs.TxPreamble == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="TxPreamble" value="0" <% if cfgs.TxPreamble == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>TX Burst</td>
                <td>
                    <input type="radio" name="TxBurst" value="1" <% if cfgs.TxBurst == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="TxBurst" value="0" <% if cfgs.TxBurst == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Packet Aggregate</td>
                <td>
                    <input type="radio" name="PktAggregate" value="1" <% if cfgs.PktAggregate == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="PktAggregate" value="0" <% if cfgs.PktAggregate == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Short Slot</td>
                <td>
                    <input type="radio" name="ShortSlot" value="1" <% if cfgs.ShortSlot == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="ShortSlot" value="0" <% if cfgs.ShortSlot == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
        </table>

        <% if cfgs["VOW_Airtime_Fairness_En"] then %>
            <div id="dev-cfg-vow" style="display:none">
                <fieldset class="cbi-section">
                    <legend> <a name="apcli_scan_section">Air-time Fairness (ATF)</a></legend>

                    <p><b>This allows you to control how the stations assiciated with a SSID share the air-time. So it is a sort of QoS scheme for wireless stations.</b></p>
                    <p>There are 2 modes available:</p>
                    <ol>
                        <li>All stations share air-time equally.</li>
                        <li>Stations will be divide into several groups, and we cab assign different air-time ration to those groups.</li>
                    </ol>

                    <input type="hidden" id="VOW_Airtime_Fairness_En" name="VOW_Airtime_Fairness_En" value="<%=cfgs.VOW_Airtime_Fairness_En or 0%>"/>
                    <% if cfgs.VOW_Airtime_Fairness_En == "1" then %>
                    <div class="cbi-button cbi-button-remove" value="1" style="width:200px" onclick="toggle_atf(this);">
                        Disable ATF
                    </div>
                    <% else %>
                    <div class="cbi-button cbi-button-add" value="0" style="width:200px" onclick="toggle_atf(this);">
                        Enable ATF
                    </div>
                    <% end %>
                    <!-- <p>
                        <button class="cbi-button cbi-button-add"  style="width:200px" onclick="return false;">
                            Weighted Airtime Fairness
                        </button>
                    </p> -->

                </fieldset>
                <fieldset class="cbi-section">
                    <legend> <a name="apcli_scan_section">Air-time Control (ATC)</a></legend>
                    <p><b>When you have multiple SSID enabled, this allows you to control how these SSIDs share airtime. So this is a sort of QoS scheme for SSID.</b></p>
                    <p>There are 2 aspects you can control, If you enable both, the rules will merge togehter:</p>
                    <ol>
                        <li>by Throughput Quota</li>
                        <li>by Airtime Ratio</li>
                    </ol>

                    <input type="hidden" id="VOW_BW_Ctrl" name="VOW_BW_Ctrl" value="<%=cfgs.VOW_BW_Ctrl or 0%>"/>
                    <% if cfgs.VOW_BW_Ctrl == "1" then %>
                    <p class="cbi-button cbi-button-remove"  style="width:200px" value="1" onclick="toggle_atc(this);">
                        Disable ATC
                    </p>
                    <% else %>
                    <p class="cbi-button cbi-button-add" style="width:200px" value="0" onclick="toggle_atc(this);">
                        Enable ATC
                    </p>
                    <% end %>

                    <br/>
                    <!--
                    VOW_Rate_Ctrl_En
                    VOW_Group_Min_Rate
                    VOW_Group_Max_Rate

                    VOW_Airtime_Ctrl_En
                    VOW_Group_Min_Ratio
                    VOW_Group_Max_Ratio
                    -->
                    <table id="atc-table" <% if cfgs.VOW_BW_Ctrl ~= "1" then %>style="display: none;" <% end %>>
                        <tr>
                            <th>SSID</th>
                            <th>ATC</th>
                            <th>Min</th>
                            <th>Max</th>
                        </tr>
                        <%
                        for _,vif in ipairs(dev.vifs) do
                        %>
                        <tr>
                            <td rowspan="2"><img src="/luci-static/resources/icons/wifi_big.png" style="float:left; margin-right:10px"><%=vif.__ssid%></td>
                            <td>
                                <input type="checkbox" name="__atc_vif<%=vif.vifidx%>_tp" value="1"
                                <% if vif.__atc_tp == "1"  then %>checked="checked"<% end %>>
                                <label style="margin: 0 1em;">TP
                            </td>
                            <td>
                                <input type="text" class="shortinput" name="__atc_vif<%=vif.vifidx%>_min_tp" value="<%=vif.__atc_min_tp%>"> Mbps
                            </td>
                            <td>
                                <input type="text" class="shortinput" name="__atc_vif<%=vif.vifidx%>_max_tp" value="<%=vif.__atc_max_tp%>"> Mbps
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <input type="checkbox" name="__atc_vif<%=vif.vifidx%>_at" value="1"
                                <% if vif.__atc_at == "1" then %>checked="checked"<% end %>>
                                <label style="margin: 0 1em;">AT</label>
                            </td>
                            <td>
                                <input type="text" class="shortinput" name="__atc_vif<%=vif.vifidx%>_min_at" value="<%=vif.__atc_min_at%>"> %
                            </td>
                            <td>
                                <input type="text" class="shortinput" name="__atc_vif<%=vif.vifidx%>_max_at" value="<%=vif.__atc_max_at%>"> %
                            </td>
                        </tr>

                        <%
                        end
                        %>
                    </table>

                </fieldset>
                <fieldset class="cbi-section">
                    <legend> <a name="apcli_scan_section">Apply to RX</a></legend>
                    <p>a
                    <b>By default, ATF and ATC only work for TX(transmit). This option will apply ATF and ATC to RX (receive).</b>
                    </p>
                    <p>
                        <input type="checkbox" name="VOW_RX_En" value="1" <% if cfgs.VOW_RX_En == "1" then %> checked="checked"<%end%>> Apply both ATC &amp; ATF to RX
                    </p>
                </fieldset>
            </div>
        <% end %>
        
        <% if cfgs["MapMode"] ~= "1" then %>
            <div id="dev-cfg-qos" style="display:none">
                    <!-- Mscs policy -->
                    <div class="mscs_policy">
                        <table class="sp_table">
                            <tr>
                                MSCS Policy 
                                <div id="mscs_length" style="display: none"></div>
                                <div id="mscs_type" style="display: none;"></div>
                            </tr>
                            <tr>
                                <th style="width:20px;">Index</th>
                                <th style="width:50px;">Client Mac</th>
                                <th style="width:70px;">UP bitmap</th>

                                <th style="width:70px;">Classifier Mask</th>
                                <th style="width:20px;">Operation</th>
                            </tr>
                            <tbody id="mscs_tabletext">

                            </tbody>
                        </table>
                        <div>
                            <input type="button" value="Add" id="add-mscs-policy" class="cbi-button cbi-button-apply"/>
                        </div>
                        <div id="mscs-form-edit" class="sp-form">
                            <div class="sp-form-title">
                                <span id='dialog_txt'>Add MSCS Policy</span>
                                <div id="mscs-form-exit">x</div>
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="mscs_client_mac">Client Mac:</label>
                                <input type="text" name="mscs_client_mac" id="mscs_client_mac" value="" placeholder="please input client mac"/><br /><br />
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="mscs_bitmap">Up bitmap:</label>
                                <input type="text" name="mscs_bitmap" id="mscs_bitmap" value=""/><br /><br />
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="classifier_mask">Classifier Mask:</label>
                                <input type="text" name="classifier_mask" id="classifier_mask" value=""/><br /><br />
                            </div>

                            <div class="sp-form-submit">
                                <input type="button" value="OK" id="mscs-policy-btnAdd">
                            </div>
                        </div>
                    </div>

                    <!-- SCS UP Tuples -->
                    <div class="scs_up_tuples" style="margin-top: 50px;">
                        <table class="sp_table">
                            <tr>
                                SCS UP Tuples
                                <div id="scs_length" style="display: none;"></div>
                                <div id="scs_type" style="display: none;"></div>
                            </tr>
                            <tr>
                                <th style="width:20px;">Index</th>
                                <th style="width:50px;">Client Mac</th>
                                <th style="width:70px;">Up</th>

                                <th style="width:70px;">Ipver</th>
                                <th style="width:20px;">Srcip</th>
                                <th style="width:50px;">Dstip</th>
                                <th style="width:50px;">Srcport</th>

                                <th style="width:20px;">Dstport</th>
                                <th style="width:20px;">Protocol</th>
                                <th style="width:20px;">Operation</th>
                            </tr>
                            <tbody id="scs_tabletext">

                            </tbody>
                        </table>
                        <div>
                            <input type="button" value="Add" id="add-scs-up" class="cbi-button cbi-button-apply"/>
                        </div>
                        <div id="scs-form-edit" class="sp-form">
                            <div class="sp-form-title">
                                <span id='dialog_txt'>Add SCS UP Tuple</span>
                                <div id="scs-form-exit">x</div>
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="scs_client_mac">Client Mac:</label>
                                <input type="text" name="scs_client_mac" id="scs_client_mac" placeholder="please input client mac"/><br /><br />
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="scs_up">Up:</label>
                                <select name="scs_up" id = "scs_up">
                                    <option value="1">1</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                    <option value="6">6</option>
                                    <option value="7">7</option>
                                </select><br /> <br />
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="scs_ipver">Ipver:</label>
                                <select name="scs_ipver" id = "scs_ipver">
                                    <option value=""></option>
                                    <option value="4">4</option>
                                    <option value="6">6</option>
                                </select><br /> <br />
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="scs_srcip">Srcip:</label>
                                <input type="text" name="scs_srcip" id="scs_srcip" value=""/><br /><br />
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="scs_dstip">Dstip:</label>
                                <input type="text" name="scs_dstip" id="scs_dstip" value=""/><br /><br />
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="scs_srcport">Srcport:</label>
                                <input type="text" name="scs_srcport" id="scs_srcport" value=""/><br /><br />
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="scs_dstport">Dstport:</label>
                                <input type="text" name="scs_dstport" id="scs_dstport" value=""/><br /><br />
                            </div>
                            <div class="sp-form-item">
                                <label class="lb" for="scs_protocol">Protocol:</label>
                                <select name="scs_protocol" id = "scs_protocol">
                                    <option value=""></option>
                                    <option value="UDP">UDP</option>
                                    <option value="TCP">TCP</option>
                                </select><br /> <br />
                            </div>

                            <div class="sp-form-submit">
                                <input type="button" value="OK" id="scs-btnAdd">
                            </div>
                        </div>
                    </div>
              
                    <div style="margin-top:50px;">
                        <input type="button" value="Apply" id="apply-scs-up" class="cbi-button cbi-button-apply"/>
                    </div>
              </div>
        <% end %>

    <div class="cbi-page-actions">

        <input class="cbi-button cbi-button-apply" name="__apply" value="Save and Apply" type="submit">
        <input class="cbi-button cbi-button-apply" value="Save" type="submit">
        <input class="cbi-button cbi-button-reset" value="Reset" type="reset">

    </div>
</form>

<script src="/luci-static/resources/jquery-3.5.1.min.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        <% if cfgs["MapMode"] ~= "1" then %>
            $("#add-mscs-policy").click(function () {
                $("#mscs-form-edit").show();
                $("#mscs_type").text('add');
                $("#mscs_client_mac").val("");
                $("#mscs_client_mac").removeAttr("disabled")
                $("#mscs_bitmap").val("");
                $("#classifier_mask").val("");
            });

            $("#add-scs-up").click(function(){
                $("#scs_client_mac").val("");
                $("#scs_client_mac").removeAttr("disabled")
                $("#scs_up").val("1");
                $("#scs_ipver").val("");
                $("#scs_srcip").val("");
                $("#scs_dstip").val("");
                $("#scs_srcport").val("");
                $("#scs_dstport").val("");
                $("#scs_protocol").val("")

                $("#scs-form-edit").show();
                $("#scs_type").text("add");
            })

            $("#mscs-form-exit").click(function () {
                $("#mscs-form-edit").hide();
            });

            $("#scs-form-exit").click(function(){
                $("#scs-form-edit").hide();
            })

            $("#mscs-policy-btnAdd").click(function(){
                var reg;
                var exp_mac = /^([a-fA-F0-9]{2}:){5}([a-fA-F0-9]{2})$/;
                var sta_mac = $("#mscs_client_mac").val();
                if (sta_mac != "") {
                    reg = sta_mac.match(exp_mac);
                    if (reg == null) {
                        alert("Sta mac address is invalid");
                        return;
                    }
                }
                var up_bitmap = $("#mscs_bitmap").val();
                if ( up_bitmap.length != 8 || !(/^[01]+$/.test(up_bitmap)) ) {
                    alert("Incorrect format of up bitmap. (From left to right, UP0~UP7)");
                    return;
                }

                var cs_mask = $("#classifier_mask").val();
                if ( cs_mask.length != 8 || !(/^[01]+$/.test(cs_mask)) ) {
                    alert("Incorrect format of classifier mask. (From left to right, ipver/srcIP/dstIP/srcPort/dstPort/0/Protocol/0)");
                    return;
                }

                var type = $("#mscs_type").text()
                var mscs_len = document.getElementById("mscs_length").innerText;
                var index = Number(mscs_len)+1;
                var str_rule = "MSCSReq,index,"+index+",action,"+type+",sta_mac,"+sta_mac+",up_bitmap,"+up_bitmap+",cs_mask,"+cs_mask
                qos_rule_change(str_rule);
                $("#mscs-form-edit").hide();
            })

            $("#scs-btnAdd").click(function(){
                var reg;
                var exp_ipv4 = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;
                var exp_ipv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
                var exp_mac = /^([a-fA-F0-9]{2}:){5}([a-fA-F0-9]{2})$/;
                var sta_mac = $("#scs_client_mac").val();
                if (sta_mac != "") {
                    reg = sta_mac.match(exp_mac);
                    if (reg == null) {
                        alert("Sta mac address is invalid");
                        return;
                    }
                }else{
                    alert("Sta mac address is invalid");
                    return;
                }
                var up = $("#scs_up").val();
                if (up < 1 || up > 7) {
                    alert("The valid values are 1-7");
                    return;
                }

                var ipver = $("#scs_ipver").val();
                var srcip = $("#scs_srcip").val();
                var dstip = $("#scs_dstip").val();
                var srcport = $("#scs_srcport").val();
                var dstport = $("#scs_dstport").val();
                var protocol = $("#scs_protocol").val().toUpperCase();

                if ( ipver=="" && srcip=="" && dstip=="" && srcport=="" && dstport=="" && protocol==""){
                    alert("ipver, srcip, dstip, srcport, dstport and protocol cannot be empty at the same time");
                    return;
                }

                if (ipver != "" && srcip=="" && dstip==""){
                    alert("When Ip version is not empty, ip cannot be empty.");
                    return;
                }

                if (srcip != "") {
                    if (Number(ipver) == 4){
                        reg = srcip.match(exp_ipv4);
                        if (reg == null) {
                            alert("Source ip address is invalid");
                            return;
                        }
                    }else if(Number(ipver) == 6){
                        reg = srcip.match(exp_ipv6);
                        if (reg == null) {
                            alert("Source ip address is invalid");
                            return;
                        }
                    }else{
                        alert("When IP is not empty, ip version cannot be empty.");
                        return;
                    }
                }

                if (dstip != "") {
                    if (Number(ipver) == 4){
                        reg = dstip.match(exp_ipv4);
                        if (reg == null) {
                            alert("Destination ip address is invalid");
                            return;
                        }
                    }else if(Number(ipver) == 6){
                        reg = dstip.match(exp_ipv6);
                        if (reg == null) {
                            alert("Destination ip address is invalid");
                            return;
                        }
                    }else{
                        alert("When IP is not empty, ip version cannot be empty.");
                        return;
                    }
                }

                if (srcport){
                    if (srcport > 65535) {
                        alert("Source port should not larger than 65535");
                        return;
                    }
                }

                if (dstport) {
                    if (dstport > 65535) {
                        alert("Destination port should not larger than 65535");
                        return;
                    }
                }

                var type = $("#scs_type").text()
                var scs_len = document.getElementById("scs_length").innerText;
                var index = Number(scs_len)+1;
                var str_rule = ""
                str_rule = str_rule + "SCSReq,index,"+index+",action,"+type+",sta_mac,"+sta_mac+",up,"+up
                if (ipver != ""){
                    str_rule = str_rule + ",ipver,"+ipver
                }
                if (srcip != ""){
                    str_rule = str_rule + ",srcip,"+srcip
                }
                if (dstip != ""){
                    str_rule = str_rule + ",dstip,"+dstip
                }
                if (srcport != ""){
                    str_rule = str_rule + ",srcport,"+srcport
                }
                if (dstport != ""){
                    str_rule = str_rule + ",dstport,"+dstport
                }
                if (protocol != ""){
                    str_rule = str_rule + ",protocol,"+protocol
                }

                qos_rule_change(str_rule);
                $("#scs-form-edit").hide();
            })

            $("#apply-mscs-policy").click(function () {
                apply_qos_config()
                alert("All config have been applied");
            });

            $("#apply-scs-up").click(function () {
                apply_qos_config()
                alert("All config have been applied");
            });
        <% end %>
    });
    
    <% if cfgs["MapMode"] ~= "1" then %>
        function arrayToObject(arr) {
            if (arr.length === 0 || arr.length % 2 !== 0) {
                throw new Error('Array must contain an even number of elements');
            }

            let obj = {};
            for (let i = 0; i < arr.length; i += 2) {
                obj[arr[i]] = arr[i + 1];
            }
            return obj;
        }

        function qos_rule_change(str_rule) {
            XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "qosmgmt_config_change")%>' + '/' + str_rule, null,
                function(x)
                {
                    get_qos_rule_list();
                }
            );
        }
        function qos_rule_move(type, index, mac) {
            if (type=="mscs"){
                str_rule = "MSCSReq,index,"+index+",action,remove,sta_mac,"+mac
            }else{
                str_rule = "SCSReq,index,"+index+",action,remove,sta_mac,"+mac
            }
            XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "qosmgmt_config_change")%>' + '/' + str_rule, null,
                function(x)
                {
                    get_qos_rule_list();
                }
            );
        }
        function qos_rule_modify(type, list) {
            if (type=="mscs"){
                var mscs_list = list.split(",")
                $("#mscs-form-edit").show();
                $("#mscs_client_mac").val(mscs_list[4]);
                $("#mscs_client_mac").attr("disabled", "disabled")
                $("#mscs_bitmap").val(mscs_list[6]);
                $("#classifier_mask").val(mscs_list[8]);
                $("#mscs_length").text(Number(mscs_list[3])-1)
                $("#mscs_type").text("change")
            }else{
                var default_obj = {index: '', sta_mac: '', up: '', ipver: '', srcip: '', dstip: '', srcport: '', dstport:'', protocol:''}
                var res = list.split(",")
                obj = arrayToObject(res.slice(1,))
                result = Object.assign(default_obj, obj)
                let scs_list = Object.values(result)
                
                $("#scs-form-edit").show();
                $("#scs_client_mac").val(scs_list[1]);
                $("#scs_client_mac").attr("disabled", "disabled")
                $("#scs_up").val(scs_list[2]);
                $("#scs_ipver").val(scs_list[3]);
                $("#scs_srcip").val(scs_list[4]);
                $("#scs_dstip").val(scs_list[5]);
                $("#scs_srcport").val(scs_list[6]);
                $("#scs_dstport").val(scs_list[7]);
                $("#scs_protocol").val(scs_list[8])
                $("#scs_length").text(Number(scs_list[0])-1)
                $("#scs_type").text("change")
            }
        }
        function apply_qos_config() {
            XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "qosmgmt_config_done")%>', null,
                function(x)
                {
                    get_qos_rule_list();
                }
            );
        }

        function get_qos_rule_list()
        {
            XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "get_qosmgmt_rule_list")%>' + '/MSCSReq', null,
                function(x)
                {
                    var rules_json = JSON.parse(x.response);
                    var rules = rules_json.rules.split("\n");
                    var rules = rules.filter(function(rule){return rule.length>10})
                    var mscs_len = document.getElementById("mscs_length")
                    mscs_len.innerText = rules.length;
                    var str = "";
                    var element;

                    for(var j=0; j<rules.length; j++){
                        var list = rules[j].split(",")
                        str += "<tr onmouseover=\"this.style.backgroundColor='#ffff66';\" onmouseout=\"this.style.backgroundColor='#d4e3e5';\">"
                        for (var i = 1; i <= list.length; i++) {
                            if ( i % 2 ==1 )
                                continue;
                            if (list[i] == undefined || list[i] == "")
                                element = "-";
                            else
                                element = list[i];

                            str += "<td>" + element + "</td>";
                        }
                        str += "<td><a href=\"#\" onclick=\"qos_rule_move('mscs', "+list[2]+", '"+list[4]+"')\" class=\"del\"><u>del</u> </a> <a href=\"#\" onclick=\"qos_rule_modify('mscs', '"+list.join(",")+"')\" class=\"modify\"><u>modify</u></a></td></tr>";

                    }
                    $("#mscs_tabletext").html(str);
                }
            );

            XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "get_qosmgmt_rule_list")%>' + '/SCSReq', null,
                function(x)
                {
                    var rules_json = JSON.parse(x.response);
                    var rules = rules_json.rules.split("\n");
                    var rules = rules.filter(function(rule){ return rule.length>10})
                    var scs_length = document.getElementById("scs_length")
                    scs_length.innerText = rules.length;
                    var str = "";
                    var element;
                    for(var j=0; j<rules.length; j++){
                        var default_obj = {index: '', sta_mac: '', up: '', ipver: '', srcip: '', dstip: '', srcport: '', dstport:'', protocol:''}
                        var list = rules[j].split(",")
                        list.pop()
                        obj = arrayToObject(list.slice(1,))
                        result = Object.assign(default_obj, obj)
                        let values = Object.values(result)
                        str += "<tr onmouseover=\"this.style.backgroundColor='#ffff66';\" onmouseout=\"this.style.backgroundColor='#d4e3e5';\">"
                        for (var i = 0; i < values.length; i++) {
                            if (values[i] == undefined || values[i] == "")
                                element = "-";
                            else
                                element = values[i];
                            str += "<td>" + element + "</td>";
                        }
                        str += "<td><a href=\"#\" onclick=\"qos_rule_move('scs', "+result["index"]+", '"+result["sta_mac"]+"')\" class=\"del\"><u>del</u> </a> <a href=\"#\" onclick=\"qos_rule_modify('scs', '"+list.join(",")+"')\" class=\"modify\"><u>modify</u></a></td></tr>";

                    }
                    $("#scs_tabletext").html(str);
                }
            );
        }
    <% end %>

    function ValidateAdvancedSettings()
    {
        var tmpVal = document.getElementById("BeaconPeriod").value;
        if(isNaN(tmpVal) || !/^\d{2,3}$/.test(tmpVal) || parseInt(tmpVal) < 20 || parseInt(tmpVal) > 999){
            alert("Beacon Interval is incorrect!\nPlease enter an integer number between 20 to 999 inclusive.");
            document.getElementById("BeaconPeriod").focus();
            document.getElementById("BeaconPeriod").select();
            return false;
        }

        return true;
    }

    function ValidateAllSettings(){
        if( !ValidateAdvancedSettings() ){
            return false;
        }
        return true;
    }

    function toggle_atf(o) {
        if (o.getAttribute("value") == "1") {
            document.getElementById("VOW_Airtime_Fairness_En").value = "0";
            o.setAttribute("value", "0");
            o.className = "cbi-button cbi-button-add";
            o.innerHTML = "Enable ATC";
        } else {
            document.getElementById("VOW_Airtime_Fairness_En").value = "1";
            o.setAttribute("value", "1");
            o.className = "cbi-button cbi-button-remove";
            o.innerHTML = "Disable ATC";
        }
    }

    function toggle_atc(o) {
        if (o.getAttribute("value") == "1") {
            document.getElementById("VOW_BW_Ctrl").value = "0";
            o.setAttribute("value", "0");
            o.className = "cbi-button cbi-button-add";
            o.innerHTML = "Enable ATC";
            document.getElementById("atc-table").style.display = "none";
        } else {
            document.getElementById("VOW_BW_Ctrl").value = "1";
            o.setAttribute("value", "1");
            o.className = "cbi-button cbi-button-remove";
            o.innerHTML = "Disable ATC";
            document.getElementById("atc-table").style.display = "";
        }
    }

    function update_easymesh_profile_fields(obj_1905)
    {
        var vifsMacList=[];
        var WirelessModeListJS = {};

        <% for _,vif in ipairs(dev.vifs) do %>
            <% if vif.state == "up" then%>
                <% local bssid = vif.__bssid and vif.__bssid:sub(1,17) or ""%>
                <% if bssid and bssid ~= "" then %>
                    vifsMacList.push("<%=bssid%>");
                    WirelessModeListJS['<%=bssid%>'] = {};
                    <% for wModeIdx, wModeStr in pairs(dev.WirelessModeList) do %>
                        WirelessModeListJS['<%=bssid%>']['<%=wModeIdx%>'] = "<%=wModeStr%>";
                    <% end %>
                <% end %>
            <% end %>
        <% end %>


        if(!obj_1905.hasOwnProperty('Radio Info')){
            console.log("Topology does not have Radio Info Property!",obj_1905);
            return;
        }

        var wmode_span = document.getElementById("EASY_MESH_WMODE_SPAN");
        wmode_span.innerHTML = document.getElementById("WirelessMode").value;
        var channel_span = document.getElementById("EASY_MESH_CHANNEL_SPAN");

        if (!channel_span){
            console.log("Failed to update EasyMesh channel field! Could not find the channel to update!");
            return;
        }
        for (var vifIdx = 0; vifIdx < vifsMacList.length; vifIdx++){
            var radioIdx;
            for (radioIdx=0; radioIdx < obj_1905['Radio Info'].length; radioIdx++){
                var radioInfoObj = obj_1905['Radio Info'][radioIdx];
                var bssInfoArr = radioInfoObj['BSSINFO'];
                var bssIdx;
                for(bssIdx=0; bssIdx < bssInfoArr.length; bssIdx++){
                    var bssInfo = bssInfoArr[bssIdx];
                    if(bssInfo.hasOwnProperty('BSSID') && (bssInfo['BSSID'].toUpperCase() == vifsMacList[vifIdx].toUpperCase())){
                        channel_span.innerHTML = radioInfoObj['channel'];
                        document.getElementById("DEV_CFG_BASIC_SETTINGS").style.display = "none";
                        document.getElementById("EASY_MESH_DEV_SETTINGS_TBODY").style.display = "";
                        break;
                    }
                }
                if(bssIdx < bssInfoArr.length){
                    break;
                }
            }
            if(radioIdx < obj_1905['Radio Info'].length){
                break;
            }
        }
    }

    function find_own_topo_info(devRole, jsTopoInfo, alMac)
    {
        var tree_info = [];
        var topoInfoArr = jsTopoInfo['topology information'];
        if(!(topoInfoArr instanceof Array)){
            console.log("Incorrect TopologyInfo: Value of topology information is not an Array!");
            return;
        }
        for(var idx_1905=0; idx_1905 < topoInfoArr.length; idx_1905++){
            var obj_1905 = topoInfoArr[idx_1905];
            if (obj_1905.hasOwnProperty('AL MAC') && (obj_1905['AL MAC'].toUpperCase() == alMac.toUpperCase())){
                update_easymesh_profile_fields(obj_1905);
                return;
            }
        }
        console.log(alMac," AL-MAC NOT FOUND in Topology! Topology: ",jsTopoInfo);
    }

    function get_al_mac(devRole, jsTopoInfo)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "multi_ap", "get_al_mac")%>' + '/' + devRole, null,
            function(x)
            {
                console.log(x);
                try{
                    var r = JSON.parse(x.response);
                    var mac_reg_exp = /[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}/;
                    if (r['status'] == "SUCCESS" && mac_reg_exp.test(r['al_mac'])) {
                        find_own_topo_info(devRole, jsTopoInfo, r['al_mac']);
                    }
                    else{
                        console.log("Incorrect AL-MAC received!",r['status'],r['al_mac']);
                    }
                }
                catch(e){
                    console.log("Incorrect response received for get AL-MAC request!",e.name,e.message);
                }
            }
        );
    }

    function get_run_time_topology(devRole)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "multi_ap", "get_runtime_topology")%>', null,
            function(x)
            {
                try{
                    var r = JSON.parse(x.response);
                    if(r.status == "SUCCESS"){
                        var jsTopoInfo = JSON.parse(r['luaTopologyInfo']);
                        get_al_mac(devRole, jsTopoInfo);
                    }
                    else{
                        console.log("Failed to get Topology Info!\nStatus: ",r.status);
                    }
                }
                catch(e){
                    console.log("Incorrect response! Failed to get Topology Info!",e.name,e.message);
                }
            }
        );
    }

    function get_device_role()
    {
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "multi_ap", "get_device_role")%>', null,
            function(x)
            {
                console.log(x);
                try{
                    var devRoleObj = JSON.parse(x.response);
                    var devRole = parseInt(devRoleObj.mapDevRole);
                    if(devRole != 1 && devRole != 2){
                        console.log("EasyMesh Device Role is neither Controller nor Agent!");
                        return;
                    }
                    document.getElementById("EASYMESH_WARNING_MSG").style.display = "";
                    get_run_time_topology(devRole);
                }
                catch(e){
                    console.log("Incorrect response received for get device role request!",e.name,e.message);
                }
            }
        );
    }

    function check_update_easymesh_profile()
    {
        <% if not pcall(require, "map_helper") then %>
            console.log("map_helper library is not available!");
            return;
        <% else %>
            <%if not map_cfgs then %>
                console.log("EasyMesh Configurations are not available!");
                return;
            <% else %>
                <% if (not appliedMapModeDiff and first_card_cfgs.MapMode == "1") or
                    (appliedMapModeDiff and appliedMapModeDiff == "1" and first_card_cfgs.MapMode ~= "1") then %>
                    get_device_role();
                <% end %>
            <% end %>
        <% end %>
    }

    function get_apply_status_cb(rsp)
    {
        try{
            var r = JSON.parse(rsp);
        }
        catch(e){
            return;
        }
        if(r.status == "ON_PROGRESS"){
            var u = confirm("Device is applying the saved settings now!\n" +
                "It is recommended to wait until all the saved settings are applied.\n" +
                "Please click on 'OK' button to wait for the device.\n" +
                "or click on 'Cancel' button to configure the settings available in current web-page.");
            if (u == true) {
                location = '<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "loading")%>' + window.location.pathname;
            }
        }
    }

    function get_apply_status()
    {
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "get_apply_status")%>', null,
            function(x)
            {
                console.log(x);
                get_apply_status_cb(x.response);
            }
        );
    }

    window.onload = function() {
        MonCon.ping();
        get_apply_status();
        check_update_easymesh_profile();
    }

</script>

<%+footer%>
