Index: hostapd-2022-07-29-b704dc72/hostapd/config_file.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/hostapd/config_file.c
+++ hostapd-2022-07-29-b704dc72/hostapd/config_file.c
@@ -3133,6 +3133,11 @@ static int hostapd_config_fill(struct ho
 			hostapd_config_parse_key_mgmt(line, pos);
 		if (bss->rsn_override_key_mgmt == -1)
 			return 1;
+	} else if (os_strcmp(buf, "rsn_override_key_mgmt_2") == 0) {
+		bss->rsn_override_key_mgmt_2 =
+			hostapd_config_parse_key_mgmt(line, pos);
+		if (bss->rsn_override_key_mgmt_2 == -1)
+			return 1;
 	} else if (os_strcmp(buf, "wpa_psk_radius") == 0) {
 		bss->wpa_psk_radius = atoi(pos);
 		if (bss->wpa_psk_radius != PSK_RADIUS_IGNORED &&
@@ -3171,6 +3176,19 @@ static int hostapd_config_fill(struct ho
 		    bss->rsn_override_pairwise == 0)
 			return 1;
 		if (bss->rsn_override_pairwise &
+			(WPA_CIPHER_NONE | WPA_CIPHER_WEP40 | WPA_CIPHER_WEP104)) {
+			wpa_printf(MSG_ERROR,
+				   "Line %d: unsupported pairwise cipher suite '%s'",
+				   line, pos);
+			return 1;
+		}
+	} else if (os_strcmp(buf, "rsn_override_pairwise_2") == 0) {
+		bss->rsn_override_pairwise_2 =
+			hostapd_config_parse_cipher(line, pos);
+		if (bss->rsn_override_pairwise_2 == -1 ||
+		    bss->rsn_override_pairwise_2 == 0)
+			return 1;
+		if (bss->rsn_override_pairwise_2 &
 		    (WPA_CIPHER_NONE | WPA_CIPHER_WEP40 | WPA_CIPHER_WEP104)) {
 			wpa_printf(MSG_ERROR,
 				   "Line %d: unsupported pairwise cipher suite '%s'",
@@ -3655,6 +3673,8 @@ static int hostapd_config_fill(struct ho
 		bss->ieee80211w = atoi(pos);
 	} else if (os_strcmp(buf, "rsn_override_mfp") == 0) {
 		bss->rsn_override_mfp = atoi(pos);
+	} else if (os_strcmp(buf, "rsn_override_mfp_2") == 0) {
+		bss->rsn_override_mfp_2 = atoi(pos);
 	} else if (os_strcmp(buf, "group_mgmt_cipher") == 0) {
 		if (os_strcmp(pos, "AES-128-CMAC") == 0) {
 			bss->group_mgmt_cipher = WPA_CIPHER_AES_128_CMAC;
Index: hostapd-2022-07-29-b704dc72/hostapd/ctrl_iface.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/hostapd/ctrl_iface.c
+++ hostapd-2022-07-29-b704dc72/hostapd/ctrl_iface.c
@@ -1000,7 +1000,8 @@ static int hostapd_ctrl_iface_get_key_mg
 #endif /* CONFIG_FILS */
 
 #ifdef CONFIG_OWE
-	if ((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt) & WPA_KEY_MGMT_OWE) {
+	if ((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt |
+		hapd->conf->rsn_override_key_mgmt_2) & WPA_KEY_MGMT_OWE) {
 		ret = os_snprintf(pos, end - pos, "OWE ");
 		if (os_snprintf_error(end - pos, ret))
 			return pos - buf;
Index: hostapd-2022-07-29-b704dc72/src/ap/ap_config.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/ap_config.c
+++ hostapd-2022-07-29-b704dc72/src/ap/ap_config.c
@@ -484,10 +484,13 @@ int hostapd_setup_sae_pt(struct hostapd_
 
 	if ((conf->sae_pwe == 0 && !hostapd_sae_pw_id_in_use(conf) &&
 	     !wpa_key_mgmt_sae_ext_key(conf->wpa_key_mgmt |
-				       conf->rsn_override_key_mgmt) &&
+				       conf->rsn_override_key_mgmt |
+				       conf->rsn_override_key_mgmt_2) &&
 	     !hostapd_sae_pk_in_use(conf)) ||
 	    conf->sae_pwe == 3 ||
-	    !wpa_key_mgmt_sae(conf->wpa_key_mgmt | conf->rsn_override_key_mgmt))
+	    !wpa_key_mgmt_sae(conf->wpa_key_mgmt |
+	    		  conf->rsn_override_key_mgmt |
+			      conf->rsn_override_key_mgmt_2))
 		return 0; /* PT not needed */
 
 	sae_deinit_pt(ssid->pt);
Index: hostapd-2022-07-29-b704dc72/src/ap/ap_config.h
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/ap_config.h
+++ hostapd-2022-07-29-b704dc72/src/ap/ap_config.h
@@ -378,8 +378,10 @@ struct hostapd_bss_config {
 	int extended_key_id;
 	int wpa_key_mgmt;
 	int rsn_override_key_mgmt;
+	int rsn_override_key_mgmt_2;
 	enum mfp_options ieee80211w;
 	enum mfp_options rsn_override_mfp;
+	enum mfp_options rsn_override_mfp_2;
 	int group_mgmt_cipher;
 	int beacon_prot;
 	/* dot11AssociationSAQueryMaximumTimeout (in TUs) */
@@ -409,6 +411,7 @@ struct hostapd_bss_config {
 	int wpa_disable_eapol_key_retries;
 	int rsn_pairwise;
 	int rsn_override_pairwise;
+	int rsn_override_pairwise_2;
 	int rsn_preauth;
 	char *rsn_preauth_interfaces;
 
Index: hostapd-2022-07-29-b704dc72/src/ap/beacon.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/beacon.c
+++ hostapd-2022-07-29-b704dc72/src/ap/beacon.c
@@ -411,6 +411,18 @@ static u8 * hostapd_get_rsne_override(st
 	return pos + 2 + ie[1];
 }
 
+static u8 * hostapd_get_rsne_override_2(struct hostapd_data *hapd, u8 *pos,
+					size_t len)
+{
+	const u8 *ie;
+
+	ie = hostapd_vendor_wpa_ie(hapd, RSNE_OVERRIDE_2_IE_VENDOR_TYPE);
+	if (!ie || 2U + ie[1] > len)
+		return pos;
+
+	os_memcpy(pos, ie, 2 + ie[1]);
+	return pos + 2 + ie[1];
+}
 
 static u8 * hostapd_get_rsnxe_override(struct hostapd_data *hapd, u8 *pos,
 				       size_t len)
@@ -436,6 +448,15 @@ static size_t hostapd_get_rsne_override_
 	return 2 + ie[1];
 }
 
+static size_t hostapd_get_rsne_override_2_len(struct hostapd_data *hapd)
+{
+	const u8 *ie;
+
+	ie = hostapd_vendor_wpa_ie(hapd, RSNE_OVERRIDE_2_IE_VENDOR_TYPE);
+	if (!ie)
+		return 0;
+	return 2 + ie[1];
+}
 
 static size_t hostapd_get_rsnxe_override_len(struct hostapd_data *hapd)
 {
@@ -574,6 +595,7 @@ static u8 * hostapd_gen_probe_resp(struc
 	buflen += hostapd_eid_owe_trans_len(hapd);
 	buflen += hostapd_eid_dpp_cc_len(hapd);
 	buflen += hostapd_get_rsne_override_len(hapd);
+	buflen += hostapd_get_rsne_override_2_len(hapd);
 	buflen += hostapd_get_rsnxe_override_len(hapd);
 
 	resp = os_zalloc(buflen);
@@ -750,6 +772,7 @@ static u8 * hostapd_gen_probe_resp(struc
 	pos = hostapd_eid_dpp_cc(hapd, pos, (u8 *) resp + buflen - pos);
 
 	pos = hostapd_get_rsne_override(hapd, pos, (u8 *) resp + buflen - pos);
+	pos = hostapd_get_rsne_override_2(hapd, pos, (u8 *) resp + buflen - pos);
 	pos = hostapd_get_rsnxe_override(hapd, pos, (u8 *) resp + buflen - pos);
 
 	if (hapd->conf->vendor_elements) {
@@ -1642,6 +1665,7 @@ int ieee802_11_build_ap_params(struct ho
 	tail_len += hostapd_eid_owe_trans_len(hapd);
 	tail_len += hostapd_eid_dpp_cc_len(hapd);
 	tail_len += hostapd_get_rsne_override_len(hapd);
+	tail_len += hostapd_get_rsne_override_2_len(hapd);
 	tail_len += hostapd_get_rsnxe_override_len(hapd);
 
 	tailpos = tail = os_malloc(tail_len);
@@ -1841,6 +1865,8 @@ int ieee802_11_build_ap_params(struct ho
 	tailpos = hostapd_eid_dpp_cc(hapd, tailpos, tail + tail_len - tailpos);
 	tailpos = hostapd_get_rsne_override(hapd, tailpos,
 					    tail + tail_len - tailpos);
+	tailpos = hostapd_get_rsne_override_2(hapd, tailpos,
+					      tail + tail_len - tailpos);
 	tailpos = hostapd_get_rsnxe_override(hapd, tailpos,
 					     tail + tail_len - tailpos);
 	if (hapd->conf->vendor_elements) {
@@ -1878,7 +1904,8 @@ int ieee802_11_build_ap_params(struct ho
 		params->pairwise_ciphers = hapd->conf->wpa_pairwise;
 	params->group_cipher = hapd->conf->wpa_group;
 	params->key_mgmt_suites = hapd->conf->wpa_key_mgmt |
-		hapd->conf->rsn_override_key_mgmt;
+		hapd->conf->rsn_override_key_mgmt |
+		hapd->conf->rsn_override_key_mgmt_2;
 	params->auth_algs = hapd->conf->auth_algs;
 	params->wpa_version = hapd->conf->wpa;
 	params->privacy = hapd->conf->wpa;
Index: hostapd-2022-07-29-b704dc72/src/ap/drv_callbacks.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/drv_callbacks.c
+++ hostapd-2022-07-29-b704dc72/src/ap/drv_callbacks.c
@@ -378,6 +378,8 @@ int hostapd_notif_assoc(struct hostapd_d
 		}
 		wpa_auth_set_rsn_override(sta->wpa_sm,
 					  elems.rsne_override != NULL);
+		wpa_auth_set_rsn_override_2(sta->wpa_sm,
+					    elems.rsne_override_2 != NULL);
 #ifdef CONFIG_MTK_IEEE80211BE
 		ml_new_assoc_sta(sta->wpa_sm, elems.ml, elems.ml_len);
 #endif
Index: hostapd-2022-07-29-b704dc72/src/ap/ieee802_11.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/ieee802_11.c
+++ hostapd-2022-07-29-b704dc72/src/ap/ieee802_11.c
@@ -2059,8 +2059,8 @@ void handle_auth_fils(struct hostapd_dat
 	if (resp != WLAN_STATUS_SUCCESS)
 		goto fail;
 
-	wpa_auth_set_rsn_override(sta->wpa_sm,
-				  elems.rsne_override != NULL);
+ 	wpa_auth_set_rsn_override(sta->wpa_sm, elems.rsne_override != NULL);
+	wpa_auth_set_rsn_override_2(sta->wpa_sm, elems.rsne_override_2 != NULL);
 
 	if (!elems.fils_nonce) {
 		wpa_printf(MSG_DEBUG, "FILS: No FILS Nonce field");
@@ -3799,7 +3799,8 @@ static void handle_auth(struct hostapd_d
 #endif /* CONFIG_IEEE80211R_AP */
 #ifdef CONFIG_SAE
 	      (hapd->conf->wpa && wpa_key_mgmt_sae(hapd->conf->wpa_key_mgmt |
-				hapd->conf->rsn_override_key_mgmt) &&
+				hapd->conf->rsn_override_key_mgmt |
+				hapd->conf->rsn_override_key_mgmt_2) &&
 	       auth_alg == WLAN_AUTH_SAE) ||
 #endif /* CONFIG_SAE */
 #ifdef CONFIG_FILS
@@ -4813,6 +4814,8 @@ static int check_assoc_ies(struct hostap
 		}
 		wpa_auth_set_rsn_override(sta->wpa_sm,
 						  elems.rsne_override != NULL);
+		wpa_auth_set_rsn_override_2(sta->wpa_sm,
+					    elems.rsne_override_2 != NULL);
 #ifdef CONFIG_MTK_IEEE80211BE
 		ml_new_assoc_sta(sta->wpa_sm, elems.ml, elems.ml_len); /*for logan owe flow*/
 #endif
@@ -4889,7 +4892,8 @@ static int check_assoc_ies(struct hostap
 		}
 #endif /* CONFIG_SAE */
 #ifdef CONFIG_OWE
-		if (((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt) & WPA_KEY_MGMT_OWE) &&
+		if (((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt |
+			hapd->conf->rsn_override_key_mgmt_2) & WPA_KEY_MGMT_OWE) &&
 		    wpa_auth_sta_key_mgmt(sta->wpa_sm) == WPA_KEY_MGMT_OWE &&
 		    elems.owe_dh) {
 			resp = owe_process_assoc_req(hapd, sta, elems.owe_dh,
@@ -5239,7 +5243,8 @@ static u16 send_assoc_resp(struct hostap
 		buflen += 150;
 #endif /* CONFIG_FILS */
 #ifdef CONFIG_OWE
-	if (sta && ((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt) & WPA_KEY_MGMT_OWE))
+	if (sta && ((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt |
+		hapd->conf->rsn_override_key_mgmt_2) & WPA_KEY_MGMT_OWE))
 		buflen += 150;
 #endif /* CONFIG_OWE */
 #ifdef CONFIG_DPP2
@@ -5327,7 +5332,8 @@ static u16 send_assoc_resp(struct hostap
 
 #ifdef CONFIG_OWE
 	if (sta && status_code == WLAN_STATUS_SUCCESS &&
-	    ((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt) & WPA_KEY_MGMT_OWE))
+	    ((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt |
+	    hapd->conf->rsn_override_key_mgmt_2) & WPA_KEY_MGMT_OWE))
 		p = wpa_auth_write_assoc_resp_owe(sta->wpa_sm, p,
 						  buf + buflen - p,
 						  ies, ies_len);
@@ -5413,7 +5419,8 @@ rsnxe_done:
 #endif /* CONFIG_IEEE80211BE */
 
 #ifdef CONFIG_OWE
-	if (((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt) & WPA_KEY_MGMT_OWE) &&
+	if (((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt |
+		hapd->conf->rsn_override_key_mgmt_2) & WPA_KEY_MGMT_OWE) &&
 	    sta && sta->owe_ecdh && status_code == WLAN_STATUS_SUCCESS &&
 	    wpa_auth_sta_key_mgmt(sta->wpa_sm) == WPA_KEY_MGMT_OWE &&
 	    !wpa_auth_sta_get_pmksa(sta->wpa_sm)) {
Index: hostapd-2022-07-29-b704dc72/src/ap/wpa_auth.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/wpa_auth.c
+++ hostapd-2022-07-29-b704dc72/src/ap/wpa_auth.c
@@ -772,6 +772,7 @@ void wpa_deinit(struct wpa_authenticator
 
 	os_free(wpa_auth->wpa_ie);
 	os_free(wpa_auth->rsne_override);
+	os_free(wpa_auth->rsne_override_2);
 	os_free(wpa_auth->rsnxe_override);
 
 	group = wpa_auth->group;
@@ -3679,8 +3680,11 @@ SM_STATE(WPA_PTK, PTKINITNEGOTIATING)
 			wpa_ie = wpa_ie + wpa_ie[1] + 2;
 		wpa_ie_len = wpa_ie[1] + 2;
 	}
-	if (sm->rsn_override &&
-	    get_vendor_ie(wpa_ie, wpa_ie_len, RSNE_OVERRIDE_IE_VENDOR_TYPE)) {
+	if ((sm->rsn_override &&
+	     get_vendor_ie(wpa_ie, wpa_ie_len, RSNE_OVERRIDE_IE_VENDOR_TYPE)) ||
+	    (sm->rsn_override_2 &&
+	     get_vendor_ie(wpa_ie, wpa_ie_len,
+			   RSNE_OVERRIDE_2_IE_VENDOR_TYPE))) {
 		const u8 *mde, *fte, *tie, *tie2 = NULL;
 		const u8 *override_rsne = NULL, *override_rsnxe = NULL;
 		const struct element *elem;
@@ -3700,7 +3704,9 @@ SM_STATE(WPA_PTK, PTKINITNEGOTIATING)
 				    wpa_ie, wpa_ie_len) {
 			if (elem->datalen >= 4) {
 				if (WPA_GET_BE32(elem->data) ==
-				    RSNE_OVERRIDE_IE_VENDOR_TYPE)
+				    (sm->rsn_override_2 ?
+				     RSNE_OVERRIDE_2_IE_VENDOR_TYPE :
+				     RSNE_OVERRIDE_IE_VENDOR_TYPE))
 					override_rsne = &elem->id;
 				if (WPA_GET_BE32(elem->data) ==
 				    RSNXE_OVERRIDE_IE_VENDOR_TYPE)
@@ -5849,6 +5855,11 @@ void wpa_auth_set_rsn_override(struct wp
 		sm->rsn_override = val;
 }
 
+void wpa_auth_set_rsn_override_2(struct wpa_state_machine *sm, bool val)
+{
+	if (sm)
+		sm->rsn_override_2 = val;
+}
 
 #ifdef CONFIG_DPP2
 void wpa_auth_set_dpp_z(struct wpa_state_machine *sm, const struct wpabuf *z)
Index: hostapd-2022-07-29-b704dc72/src/ap/wpa_auth.h
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/wpa_auth.h
+++ hostapd-2022-07-29-b704dc72/src/ap/wpa_auth.h
@@ -176,6 +176,7 @@ struct wpa_auth_config {
 	int extended_key_id;
 	int wpa_key_mgmt;
 	int rsn_override_key_mgmt;
+	int rsn_override_key_mgmt_2;
 	int wpa_pairwise;
 	int wpa_group;
 	int wpa_group_rekey;
@@ -188,6 +189,7 @@ struct wpa_auth_config {
 	int wpa_disable_eapol_key_retries;
 	int rsn_pairwise;
 	int rsn_override_pairwise;
+	int rsn_override_pairwise_2;
 	int rsn_preauth;
 	int eapol_version;
 	int wmm_enabled;
@@ -197,6 +199,7 @@ struct wpa_auth_config {
 	int tx_status;
 	enum mfp_options ieee80211w;
 	enum mfp_options rsn_override_mfp;
+	enum mfp_options rsn_override_mfp_2;
 	int beacon_prot;
 	int group_mgmt_cipher;
 	int sae_require_mfp;
@@ -570,6 +573,7 @@ bool wpa_auth_write_fd_rsn_info(struct w
 				u8 *fd_rsn_info);
 void wpa_auth_set_auth_alg(struct wpa_state_machine *sm, u16 auth_alg);
 void wpa_auth_set_rsn_override(struct wpa_state_machine *sm, bool val);
+void wpa_auth_set_rsn_override_2(struct wpa_state_machine *sm, bool val);
 void wpa_auth_set_dpp_z(struct wpa_state_machine *sm, const struct wpabuf *z);
 void wpa_auth_set_transition_disable(struct wpa_authenticator *wpa_auth,
 				     u8 val);
Index: hostapd-2022-07-29-b704dc72/src/ap/wpa_auth_glue.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/wpa_auth_glue.c
+++ hostapd-2022-07-29-b704dc72/src/ap/wpa_auth_glue.c
@@ -46,6 +46,7 @@ static void hostapd_wpa_auth_conf(struct
 	wconf->extended_key_id = conf->extended_key_id;
 	wconf->wpa_key_mgmt = conf->wpa_key_mgmt;
 	wconf->rsn_override_key_mgmt = conf->rsn_override_key_mgmt;
+	wconf->rsn_override_key_mgmt_2 = conf->rsn_override_key_mgmt_2;
 	wconf->wpa_pairwise = conf->wpa_pairwise;
 	wconf->wpa_group = conf->wpa_group;
 	wconf->wpa_group_rekey = conf->wpa_group_rekey;
@@ -58,6 +59,7 @@ static void hostapd_wpa_auth_conf(struct
 	wconf->wpa_pairwise_update_count = conf->wpa_pairwise_update_count;
 	wconf->rsn_pairwise = conf->rsn_pairwise;
 	wconf->rsn_override_pairwise = conf->rsn_override_pairwise;
+	wconf->rsn_override_pairwise_2 = conf->rsn_override_pairwise_2;
 	wconf->rsn_preauth = conf->rsn_preauth;
 	wconf->eapol_version = conf->eapol_version;
 #ifdef CONFIG_MACSEC
@@ -73,6 +75,7 @@ static void hostapd_wpa_auth_conf(struct
 	wconf->okc = conf->okc;
 	wconf->ieee80211w = conf->ieee80211w;
 	wconf->rsn_override_mfp = conf->rsn_override_mfp;
+	wconf->rsn_override_mfp_2 = conf->rsn_override_mfp_2;
 	wconf->beacon_prot = conf->beacon_prot;
 	wconf->group_mgmt_cipher = conf->group_mgmt_cipher;
 	wconf->sae_require_mfp = conf->sae_require_mfp;
@@ -364,13 +367,15 @@ static const u8 * hostapd_wpa_auth_get_p
 #endif /* CONFIG_SAE */
 
 #ifdef CONFIG_OWE
-	if (((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt) & WPA_KEY_MGMT_OWE) &&
+	if (((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt |
+		hapd->conf->rsn_override_key_mgmt_2) & WPA_KEY_MGMT_OWE) &&
 	    sta && sta->owe_pmk) {
 		if (psk_len)
 			*psk_len = sta->owe_pmk_len;
 		return sta->owe_pmk;
 	}
-	if (((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt) & WPA_KEY_MGMT_OWE) && sta) {
+	if (((hapd->conf->wpa_key_mgmt | hapd->conf->rsn_override_key_mgmt |
+		hapd->conf->rsn_override_key_mgmt_2) & WPA_KEY_MGMT_OWE) && sta) {
 		struct rsn_pmksa_cache_entry *sa;
 
 		sa = wpa_auth_sta_get_pmksa(sta->wpa_sm);
Index: hostapd-2022-07-29-b704dc72/src/ap/wpa_auth_i.h
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/wpa_auth_i.h
+++ hostapd-2022-07-29-b704dc72/src/ap/wpa_auth_i.h
@@ -136,6 +136,7 @@ struct wpa_state_machine {
 	u32 dot11RSNAStatsTKIPRemoteMICFailures;
 
 	bool rsn_override;
+	bool rsn_override_2;
 
 #ifdef CONFIG_IEEE80211R_AP
 	u8 xxkey[PMK_LEN_MAX]; /* PSK or the second 256 bits of MSK, or the
@@ -252,6 +253,7 @@ struct wpa_authenticator {
 	size_t wpa_ie_len;
 
 	u8 *rsne_override; /* RSNE with overridden payload */
+	u8 *rsne_override_2; /* RSNE with overridden (2) payload */
 	u8 *rsnxe_override; /* RSNXE with overridden payload */
 
 	u8 addr[ETH_ALEN];
Index: hostapd-2022-07-29-b704dc72/src/ap/wpa_auth_ie.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/wpa_auth_ie.c
+++ hostapd-2022-07-29-b704dc72/src/ap/wpa_auth_ie.c
@@ -452,6 +452,34 @@ static int wpa_write_rsne_override(struc
 	return pos - buf;
 }
 
+static int wpa_write_rsne_override_2(struct wpa_auth_config *conf, u8 *buf,
+				     size_t len)
+{
+	u8 *pos, *len_pos;
+
+	pos = buf;
+	*pos++ = WLAN_EID_VENDOR_SPECIFIC;
+	len_pos = pos++;
+
+	WPA_PUT_BE32(pos, RSNE_OVERRIDE_2_IE_VENDOR_TYPE);
+	pos += 4;
+
+	WPA_PUT_LE16(pos, RSN_VERSION);
+	pos += 2;
+
+	pos = rsne_write_data(buf, len, pos, conf->wpa_group,
+			      conf->rsn_override_pairwise_2,
+			      conf->rsn_override_key_mgmt_2,
+			      wpa_own_rsn_capab(conf, conf->rsn_override_mfp_2),
+			      NULL, conf->rsn_override_mfp_2,
+			      conf->group_mgmt_cipher);
+	if (!pos)
+		return -1;
+
+	*len_pos = (pos - buf) - 2;
+
+	return pos - buf;
+}
 
 static u16 rsnxe_capab(struct wpa_auth_config *conf, int key_mgmt)
 {
@@ -512,7 +540,8 @@ static int wpa_write_rsnxe_override(stru
 	u16 capab;
 	size_t flen;
 
-	capab = rsnxe_capab(conf, conf->rsn_override_key_mgmt);
+	capab = rsnxe_capab(conf, conf->rsn_override_key_mgmt |
+			    conf->rsn_override_key_mgmt_2);
 
 	flen = (capab & 0xff00) ? 2 : 1;
 	if (!capab)
@@ -649,6 +678,18 @@ int wpa_auth_gen_wpa_ie(struct wpa_authe
 		if (res < 0)
 			return res;
 		pos += res;
+	}
+	if ((wpa_auth->conf.wpa & WPA_PROTO_RSN) &&
+	    wpa_auth->conf.rsn_override_key_mgmt_2) {
+		res = wpa_write_rsne_override_2(&wpa_auth->conf, pos,
+						buf + sizeof(buf) - pos);
+		if (res < 0)
+			return res;
+		pos += res;
+	}
+	if ((wpa_auth->conf.wpa & WPA_PROTO_RSN) &&
+	    (wpa_auth->conf.rsn_override_key_mgmt ||
+	     wpa_auth->conf.rsn_override_key_mgmt_2)) {
 		res = wpa_write_rsnxe_override(&wpa_auth->conf, pos,
 					       buf + sizeof(buf) - pos);
 		if (res < 0)
@@ -677,6 +718,27 @@ int wpa_auth_gen_wpa_ie(struct wpa_authe
 		*pos++ = WLAN_EID_RSN;
 		*pos++ = res - 2 - 4;
 		os_memcpy(pos, &buf[2 + 4], res - 2 - 4);
+	}
+
+	if ((wpa_auth->conf.wpa & WPA_PROTO_RSN) &&
+	    wpa_auth->conf.rsn_override_key_mgmt_2) {
+		res = wpa_write_rsne_override_2(&wpa_auth->conf, buf,
+						sizeof(buf));
+		if (res < 0)
+			return res;
+		os_free(wpa_auth->rsne_override_2);
+		wpa_auth->rsne_override_2 = os_malloc(res - 4);
+		if (!wpa_auth->rsne_override_2)
+			return -1;
+		pos = wpa_auth->rsne_override_2;
+		*pos++ = WLAN_EID_RSN;
+		*pos++ = res - 2 - 4;
+		os_memcpy(pos, &buf[2 + 4], res - 2 - 4);
+	}
+
+	if ((wpa_auth->conf.wpa & WPA_PROTO_RSN) &&
+	    (wpa_auth->conf.rsn_override_key_mgmt ||
+	     wpa_auth->conf.rsn_override_key_mgmt_2)) {
 
 		res = wpa_write_rsnxe_override(&wpa_auth->conf, buf,
 					       sizeof(buf));
@@ -896,7 +958,8 @@ wpa_validate_wpa_ie(struct wpa_authentic
 	}
 
 	key_mgmt = data.key_mgmt & (wpa_auth->conf.wpa_key_mgmt |
-				    wpa_auth->conf.rsn_override_key_mgmt);
+				    wpa_auth->conf.rsn_override_key_mgmt |
+				    wpa_auth->conf.rsn_override_key_mgmt_2);
 	if (!key_mgmt) {
 		wpa_printf(MSG_DEBUG, "Invalid WPA key mgmt (0x%x) from "
 			   MACSTR, data.key_mgmt, MAC2STR(sm->addr));
@@ -964,7 +1027,8 @@ wpa_validate_wpa_ie(struct wpa_authentic
 	if (version == WPA_PROTO_RSN)
 		ciphers = data.pairwise_cipher &
 			(wpa_auth->conf.rsn_pairwise |
-			 wpa_auth->conf.rsn_override_pairwise);
+			 wpa_auth->conf.rsn_override_pairwise |
+			 wpa_auth->conf.rsn_override_pairwise_2);
 	else
 		ciphers = data.pairwise_cipher & wpa_auth->conf.wpa_pairwise;
 	if (!ciphers) {
Index: hostapd-2022-07-29-b704dc72/src/common/ieee802_11_common.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/common/ieee802_11_common.c
+++ hostapd-2022-07-29-b704dc72/src/common/ieee802_11_common.c
@@ -144,6 +144,10 @@ static int ieee802_11_parse_vendor_speci
 			elems->rsne_override = pos;
 			elems->rsne_override_len = elen;
 			break;
+		case WFA_RSNE_OVERRIDE_2_OUI_TYPE:
+			elems->rsne_override_2 = pos;
+			elems->rsne_override_2_len = elen;
+			break;
 		default:
 			wpa_printf(MSG_MSGDUMP, "Unknown WFA "
 				   "information element ignored "
Index: hostapd-2022-07-29-b704dc72/src/common/ieee802_11_common.h
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/common/ieee802_11_common.h
+++ hostapd-2022-07-29-b704dc72/src/common/ieee802_11_common.h
@@ -124,6 +124,7 @@ struct ieee802_11_elems {
 	const u8 *ml;
 #endif
 	const u8 *rsne_override;
+	const u8 *rsne_override_2;
 
 	u8 ssid_len;
 	u8 supp_rates_len;
@@ -184,6 +185,7 @@ struct ieee802_11_elems {
 	u8 ml_len;
 #endif
 	size_t rsne_override_len;
+	size_t rsne_override_2_len;
 
 	struct mb_ies_info mb_ies;
 	struct frag_ies_info frag_ies;
Index: hostapd-2022-07-29-b704dc72/src/common/ieee802_11_defs.h
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/common/ieee802_11_defs.h
+++ hostapd-2022-07-29-b704dc72/src/common/ieee802_11_defs.h
@@ -1377,15 +1377,12 @@ struct ieee80211_ampe_ie {
 #define QM_IE_OUI_TYPE 0x22
 #define WFA_CAPA_IE_VENDOR_TYPE 0x506f9a23
 #define WFA_CAPA_OUI_TYPE 0x23
-#define WFA_RSNE_OVERRIDE_OUI_TYPE 0x26
-#define WFA_RSNXE_OVERRIDE_OUI_TYPE 0x27
-#if 1
-#define RSNE_OVERRIDE_IE_VENDOR_TYPE 0x506f9a26
-#define RSNXE_OVERRIDE_IE_VENDOR_TYPE 0x506f9a27
-#else
-#define RSNE_OVERRIDE_IE_VENDOR_TYPE 0x00137407
-#define RSNXE_OVERRIDE_IE_VENDOR_TYPE 0x00137408
-#endif
+#define WFA_RSNE_OVERRIDE_OUI_TYPE 0x29
+#define WFA_RSNE_OVERRIDE_2_OUI_TYPE 0x2a
+#define WFA_RSNXE_OVERRIDE_OUI_TYPE 0x2b
+#define RSNE_OVERRIDE_IE_VENDOR_TYPE 0x506f9a29
+#define RSNE_OVERRIDE_2_IE_VENDOR_TYPE 0x506f9a2a
+#define RSNXE_OVERRIDE_IE_VENDOR_TYPE 0x506f9a2b
 
 #define MULTI_AP_SUB_ELEM_TYPE 0x06
 #define MULTI_AP_TEAR_DOWN BIT(4)
Index: hostapd-2022-07-29-b704dc72/src/common/wpa_common.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/common/wpa_common.c
+++ hostapd-2022-07-29-b704dc72/src/common/wpa_common.c
@@ -1990,7 +1990,9 @@ int wpa_parse_wpa_ie_rsn(const u8 *rsn_i
 		data->proto = WPA_PROTO_OSEN;
 	} else if (rsn_ie_len >= 2 + 4 + 2 && rsn_ie[1] >= 4 + 2 &&
 		   rsn_ie[1] == rsn_ie_len - 2 &&
-		   WPA_GET_BE32(&rsn_ie[2]) == RSNE_OVERRIDE_IE_VENDOR_TYPE &&
+		   (WPA_GET_BE32(&rsn_ie[2]) == RSNE_OVERRIDE_IE_VENDOR_TYPE ||
+		    WPA_GET_BE32(&rsn_ie[2]) ==
+		    RSNE_OVERRIDE_2_IE_VENDOR_TYPE) &&
 		   WPA_GET_LE16(&rsn_ie[2 + 4]) == RSN_VERSION) {
 		pos = rsn_ie + 2 + 4 + 2;
 		left = rsn_ie_len - 2 - 4 - 2;
Index: hostapd-2022-07-29-b704dc72/src/drivers/driver_nl80211_capa.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/drivers/driver_nl80211_capa.c
+++ hostapd-2022-07-29-b704dc72/src/drivers/driver_nl80211_capa.c
@@ -1364,6 +1364,7 @@ int wpa_driver_nl80211_capa(struct wpa_d
 			WPA_DRIVER_CAPA_KEY_MGMT_WPA_PSK |
 			WPA_DRIVER_CAPA_KEY_MGMT_WPA2 |
 			WPA_DRIVER_CAPA_KEY_MGMT_WPA2_PSK |
+			WPA_DRIVER_CAPA_KEY_MGMT_PSK_SHA256 |
 			WPA_DRIVER_CAPA_KEY_MGMT_SUITE_B |
 			WPA_DRIVER_CAPA_KEY_MGMT_OWE |
 			WPA_DRIVER_CAPA_KEY_MGMT_DPP;
@@ -1379,6 +1380,7 @@ int wpa_driver_nl80211_capa(struct wpa_d
 				WPA_DRIVER_CAPA_KEY_MGMT_FILS_SHA384 |
 				WPA_DRIVER_CAPA_KEY_MGMT_FT_FILS_SHA256 |
 				WPA_DRIVER_CAPA_KEY_MGMT_FT_FILS_SHA384 |
+				WPA_DRIVER_CAPA_KEY_MGMT_SAE_EXT_KEY |
 				WPA_DRIVER_CAPA_KEY_MGMT_SAE;
 		else if (drv->capa.flags & WPA_DRIVER_FLAGS_FILS_SK_OFFLOAD)
 			drv->capa.key_mgmt |=
Index: hostapd-2022-07-29-b704dc72/src/ml/ml_common.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ml/ml_common.c
+++ hostapd-2022-07-29-b704dc72/src/ml/ml_common.c
@@ -988,7 +988,11 @@ u8* ml_add_m3_kde(struct wpa_state_machi
 			return NULL;
 		}
 
-		if (get_vendor_ie(auth->wpa_ie, auth->wpa_ie_len, RSNE_OVERRIDE_IE_VENDOR_TYPE)) {
+		wpa_printf(MSG_INFO, "ML: rsn_override:%d, rsn_override_2:%d", sm->rsn_override, sm->rsn_override_2);
+		if ((sm->rsn_override && 
+			get_vendor_ie(auth->wpa_ie, auth->wpa_ie_len, RSNE_OVERRIDE_IE_VENDOR_TYPE)) ||
+			(sm->rsn_override_2 && 
+			get_vendor_ie(auth->wpa_ie, auth->wpa_ie_len, RSNE_OVERRIDE_2_IE_VENDOR_TYPE))) {
 			const u8 *override_rsne = NULL, *override_rsnxe = NULL;
 			const struct element *elem;
 
@@ -996,7 +1000,9 @@ u8* ml_add_m3_kde(struct wpa_state_machi
 				    auth->wpa_ie, auth->wpa_ie_len) {
 				if (elem->datalen >= 4) {
 					if (WPA_GET_BE32(elem->data) ==
-					    RSNE_OVERRIDE_IE_VENDOR_TYPE)
+					    	(sm->rsn_override_2 ?
+				     		RSNE_OVERRIDE_2_IE_VENDOR_TYPE :
+				     		RSNE_OVERRIDE_IE_VENDOR_TYPE))
 						override_rsne = &elem->id;
 					if (WPA_GET_BE32(elem->data) ==
 					    RSNXE_OVERRIDE_IE_VENDOR_TYPE)
Index: hostapd-2022-07-29-b704dc72/src/ml/ml_supplicant.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ml/ml_supplicant.c
+++ hostapd-2022-07-29-b704dc72/src/ml/ml_supplicant.c
@@ -479,6 +479,12 @@ static int ml_get_wpa_ie(struct wpa_supp
 
 	os_memset(wpa, 0, sizeof(*wpa));
 
+	ie = wpa_bss_get_vendor_ie(bss, RSNE_OVERRIDE_2_IE_VENDOR_TYPE);
+	if (ie) {
+		wpa_printf(MSG_INFO, "ML: AP is in RSNO 2 mode");
+		return 1;
+	}
+
 	ie = wpa_bss_get_vendor_ie(bss, RSNE_OVERRIDE_IE_VENDOR_TYPE);
 	if (ie) {
 		wpa_printf(MSG_INFO, "ML: AP is in RSNO mode");
Index: hostapd-2022-07-29-b704dc72/src/rsn_supp/wpa_ie.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/rsn_supp/wpa_ie.c
+++ hostapd-2022-07-29-b704dc72/src/rsn_supp/wpa_ie.c
@@ -33,12 +33,15 @@ int wpa_parse_wpa_ie(const u8 *wpa_ie, s
 	if (wpa_ie_len >= 6 && wpa_ie[0] == WLAN_EID_VENDOR_SPECIFIC &&
 		wpa_ie[1] >= 4 && WPA_GET_BE32(&wpa_ie[2]) == OSEN_IE_VENDOR_TYPE)
 		return wpa_parse_wpa_ie_rsn(wpa_ie, wpa_ie_len, data);
-	else if (wpa_ie_len >= 6 && wpa_ie[0] == WLAN_EID_VENDOR_SPECIFIC &&
-		 wpa_ie[1] >= 4 &&
-		 WPA_GET_BE32(&wpa_ie[2]) == RSNE_OVERRIDE_IE_VENDOR_TYPE)
+	if (wpa_ie_len >= 6 && wpa_ie[0] == WLAN_EID_VENDOR_SPECIFIC &&
+	    wpa_ie[1] >= 4 &&
+	    WPA_GET_BE32(&wpa_ie[2]) == RSNE_OVERRIDE_IE_VENDOR_TYPE)
+		return wpa_parse_wpa_ie_rsn(wpa_ie, wpa_ie_len, data);
+	if (wpa_ie_len >= 6 && wpa_ie[0] == WLAN_EID_VENDOR_SPECIFIC &&
+	    wpa_ie[1] >= 4 &&
+	    WPA_GET_BE32(&wpa_ie[2]) == RSNE_OVERRIDE_2_IE_VENDOR_TYPE)
 		return wpa_parse_wpa_ie_rsn(wpa_ie, wpa_ie_len, data);
-	else
-		return wpa_parse_wpa_ie_wpa(wpa_ie, wpa_ie_len, data);
+	return wpa_parse_wpa_ie_wpa(wpa_ie, wpa_ie_len, data);
 }
 
 
Index: hostapd-2022-07-29-b704dc72/wpa_supplicant/bss.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/wpa_supplicant/bss.c
+++ hostapd-2022-07-29-b704dc72/wpa_supplicant/bss.c
@@ -1434,6 +1434,9 @@ const u8 * wpa_bss_get_rsne(const struct
 		return wpa_bss_get_ie(bss, WLAN_EID_RSN);
 #endif /* CONFIG_TESTING_OPTIONS */
 
+	ie = wpa_bss_get_vendor_ie(bss, RSNE_OVERRIDE_2_IE_VENDOR_TYPE);
+	if (ie)
+		return ie;
 	ie = wpa_bss_get_vendor_ie(bss, RSNE_OVERRIDE_IE_VENDOR_TYPE);
 	if (ie)
 		return ie;
Index: hostapd-2022-07-29-b704dc72/wpa_supplicant/events.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/wpa_supplicant/events.c
+++ hostapd-2022-07-29-b704dc72/wpa_supplicant/events.c
@@ -3214,6 +3214,13 @@ no_pfs:
 		}
 
 		if (p[0] == WLAN_EID_VENDOR_SPECIFIC && p[1] >= 6 &&
+		    WPA_GET_BE32(&p[2]) == RSNE_OVERRIDE_2_IE_VENDOR_TYPE) {
+			rsn_found = 1;
+			wpa_sm_set_ap_rsn_ie(wpa_s->wpa, p, len);
+		}
+
+		if (!rsn_found &&
+			p[0] == WLAN_EID_VENDOR_SPECIFIC && p[1] >= 6 &&
 		    WPA_GET_BE32(&p[2]) == RSNE_OVERRIDE_IE_VENDOR_TYPE) {
 			rsn_found = 1;
 			wpa_sm_set_ap_rsn_ie(wpa_s->wpa, p, len);
Index: hostapd-2022-07-29-b704dc72/wpa_supplicant/sme.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/wpa_supplicant/sme.c
+++ hostapd-2022-07-29-b704dc72/wpa_supplicant/sme.c
@@ -2145,6 +2145,20 @@ mscs_fail:
 #endif /* CONFIG_TESTING_OPTIONS */
 	if (wpa_s->current_bss &&
 	    wpa_bss_get_vendor_ie(wpa_s->current_bss,
+				  RSNE_OVERRIDE_2_IE_VENDOR_TYPE) &&
+	    wpa_s->sme.assoc_req_ie_len + 2 + 4 <=
+	    sizeof(wpa_s->sme.assoc_req_ie)) {
+		u8 *pos = wpa_s->sme.assoc_req_ie + wpa_s->sme.assoc_req_ie_len;
+
+		/* Indicate support for RSN overriding */
+		*pos++ = WLAN_EID_VENDOR_SPECIFIC;
+		*pos++ = 4;
+		WPA_PUT_BE32(pos, RSNE_OVERRIDE_2_IE_VENDOR_TYPE);
+		wpa_s->sme.assoc_req_ie_len += 2 + 4;
+		wpa_printf(MSG_INFO,
+				   "support for RSN overriding 2");
+	} else if (wpa_s->current_bss &&
+	    wpa_bss_get_vendor_ie(wpa_s->current_bss,
 				  RSNE_OVERRIDE_IE_VENDOR_TYPE) &&
 	    wpa_s->sme.assoc_req_ie_len + 2 + 4 <=
 	    sizeof(wpa_s->sme.assoc_req_ie)) {
@@ -2155,7 +2169,11 @@ mscs_fail:
 		*pos++ = 4;
 		WPA_PUT_BE32(pos, RSNE_OVERRIDE_IE_VENDOR_TYPE);
 		wpa_s->sme.assoc_req_ie_len += 2 + 4;
-	}
+		wpa_printf(MSG_INFO,
+				   "support for RSN overriding");
+	} else 
+		wpa_printf(MSG_INFO,
+				   "it is normal flow, not RSN overriding flow");
 
 #ifdef CONFIG_TESTING_OPTIONS
 skip_rsne_override:
Index: hostapd-2022-07-29-b704dc72/wpa_supplicant/wpa_supplicant.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/wpa_supplicant/wpa_supplicant.c
+++ hostapd-2022-07-29-b704dc72/wpa_supplicant/wpa_supplicant.c
@@ -3538,6 +3538,19 @@ mscs_end:
 		wpa_ie_len += 2 + 4;
 	}
 
+	if (bss && wpa_bss_get_vendor_ie(bss, RSNE_OVERRIDE_2_IE_VENDOR_TYPE) &&
+	    wpa_ie_len + 2 + 4 <= max_wpa_ie_len) {
+		u8 *pos = wpa_ie + wpa_ie_len;
+
+		/* Indicate support for RSN overriding */
+		*pos++ = WLAN_EID_VENDOR_SPECIFIC;
+		*pos++ = 4;
+		WPA_PUT_BE32(pos, RSNE_OVERRIDE_2_IE_VENDOR_TYPE);
+		pos += 4;
+		wpa_hexdump(MSG_MSGDUMP, "RSNE Override 2", wpa_ie, pos - wpa_ie);
+		wpa_ie_len += 2 + 4;
+	}
+
 	params->wpa_ie = wpa_ie;
 	params->wpa_ie_len = wpa_ie_len;
 	params->auth_alg = algs;
Index: hostapd-2022-07-29-b704dc72/wpa_supplicant/wpa_supplicant_i.h
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/wpa_supplicant/wpa_supplicant_i.h
+++ hostapd-2022-07-29-b704dc72/wpa_supplicant/wpa_supplicant_i.h
@@ -930,6 +930,7 @@ struct wpa_supplicant {
 	u64 drv_flags;
 	u64 drv_flags2;
 	unsigned int drv_enc;
+	unsigned int drv_key_mgmt;
 	unsigned int drv_rrm_flags;
 	unsigned int drv_max_acl_mac_addrs;
 
